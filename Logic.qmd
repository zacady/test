---
bibliography: references.bib
---

# An introduction to inductive logic

In the previous chapter, we outlined a general strategy to approach the highly complicated objects that social scientists typically aim to study. Starting from a broad question about a theoretical variable (*How does well-being work?*), we ended up with the task of building statistical models designed to explain a set of data which represent our variable of interest. Our hope is that, thanks to its simplicity, our model will help us learn something about the complicated processes that underlie our phenomenon of interest. 

But there is a problem with this strategy. When we ask a question like *What are the determinants of human well-being?*, the answers we are seeking are general ones. Thus, when we formulate a hypothesis as one tentative answer that we would like to test, we will typically give the form of a general statement (*e.g., Income increases well-being*). On the other hand, when we get to the part where we build a statistical model, we are now dealing with a particular set of data obtained in the context of a particular study. Our problem, then, is the following: can we learn something about a general statement based on observations made in a particular set of data?

In this chapter, we will define this problem from a logical perspective. Assuming that, as researchers, we strive to make statements about the world that are true, it is important to acknowledge that distinguishing true statements from false ones is far from self-evident. Thus, we should think of a statement as true only if we have reasons to do so. Such reasons, together with the conclusion they are meant to support form what logicians call an [argument]{.mybold}. 

## Arguments

Arguments are made up of basic statements called [propositions]{.mybold}. Propositions are the building blocks of arguments. An important feature of propositions is that they are either true or false. This means that questions or orders are not propositions because they cannot be said to be true or false.

::: definition
[Propositions]{.mybold} *are basic statements that are either true or false.*
:::

Two types of propositions form an argument: the [premises]{.mybold} and the [conclusion]{.mybold}.

The premises are the propositions forming the basis on which the argument rests. The are the starting point of the argument. The conclusion, on the other hand, is the end point of the argument. It is the proposition which, according to the argument, is justified by the premises.

::: definition
*The* [premises]{.mybold} *are the propositions invoked to justify the conclusion.*

*The* [conclusion]{.mybold} *is the proposition inferred based on the premises.*
:::

Thus, if I say:

> I am always in a bad mood before I drink a coffee, which I haven't yet. So, I am in a bad mood.

I can re-write my argument as follows:

> Argument (1)
>
> **Premise 1**: I am always in a bad mood before I drink coffee.
>
> **Premise 2**: I didn't drink a coffee yet.
>
> **Conclusion**: I am in a bad mood.


> **(P1)**: *This orange is good.*
>
> **Therefore**: *All oranges in the box are good.*

## Deductive logic

Deductive logic is concerned with identifying the form of arguments whereby the conclusion can be safely derived from the premises.

### Validity

Consider Argument (1), for instance:

> Argument (1)
>
> **Premise 1**: The cat is either dead or alive.
>
> **Premise 2**: The cat is not dead.
>
> **Conclusion**: The cat is alive.

If Premise 1 and 2 are true, there is absolutely no way that the conclusion is not true. Logicians have a specific term to refer to this property: they say that such an argument is [valid]{.mybold}.

::: definition
A deductive argument is [valid]{.mybold} if and only if the truth of all the premises *necessarily* implies the truth of the conclusion. Otherwise, it is [invalid]{.mybold}.
:::

Ian Hacking [-@hacking2001] usefully calls valid arguments "risk-free arguments".

Some arguments may appear intuitively compelling to us, while they are not, in fact, valid. We say that they [invalid]{.mybold}. Consider the following:

> Argument (2)
>
> **Premise 1**: If Trillian is hungry, then she starts eating.
>
> **Premise 2**: Trillian starts eating.
>
> **Conclusion**: Trillian is hungry.

Even if the conclusion could happen to be true, it does not necessarily follow from the premises. Premise 1 does not rule out that Trillian could start eating even if not hungry. Thus, the fact that Trillian starts eating (Premise 2) does not necessarily imply that she is hungry. Trillian might simply be bored or trying to please a host who invited her for dinner, for instance. 

Argument (2) commits a fallacy, i.e., an error in reasoning. This particular fallacy is called "affirming the consequent". 

### Soundness

We have seen that a valid argument ensures that the conclusion is true if the premises are all true. But note that there is an important "if" there: **if all the premises are true**. In other words, an argument can be valid while its premises are false.



```{r}
#| label: tbl-arg
#| tbl-cap: Determining the soundness of deductive arguments


library(tidyverse)
library(flextable)

tibble(
  "  " = c("Premises", "Premises"),
  " " = c("All true", "Not all true"),
  Valid = c("Sound", "Unsound"),
  Invalid = c("Unsound", "Unsound")
) %>%
  flextable::flextable() %>%
  flextable::merge_v(j = 1) %>%
  flextable::add_header_row(values = c("", "", "Reasoning"), colwidths = c(1, 1, 2)) %>%
  flextable::align(align = "center", part = "all") %>%
  flextable::border_remove() %>%
  flextable::border(j=3:4, border = officer::fp_border(color = "black"), part = "body") %>%
  flextable::bold(j = 1, part = "body") %>%
  flextable::bold(part = "header", i = 1) %>%
  autofit(add_w = 0.5, add_h = .7) %>% 
  width(j = 1:2, width = .9, unit = "in") %>% 
  height(height = 100, unit = "in") %>%
  line_spacing(space = 2.7, part = "body")

```

## Inductive logic



## Elements of set theory

Arguments using quantifiers like "all", "some", or "none" can usefully be represented through relations between sets.

::: {layout="[60,40]" layout-valign="center" fig-align="center"}
> *Argument (3)*
>
> **Premise 1**: All scientists love statistics
>
> **Premise 2**: All social scientists are scientists
>
> **Conclusion**: All social scientists love statistics

```{r}
#| label: fig-set1
#| fig-cap: "Set representation of Argument (3)"
#| fig-dpi: 330
#| fig-align: center
#| out-width: "100%"

library(tidyverse)
library(ggforce)

labs_dt <- tibble(
  x = c(0, 0, 0),
  y = c(4, 2.2, .5),
  Lab = c("Statistics lovers", "Scientists", "Social\nscientists")
)

tmp <- tibble(
  x = c(-1.5, 1.5),
  y = c(-1,1)
)

tibble(
  x0 = c(0, 0, 0),
  y0 = c(2, 1, .5),
  a = c(1.5, 1, .5),
  b = c(3, 2, 1.2),
  type = factor(1:3)
) %>%
  ggplot() +
  geom_circle(aes(x0=x0, y0=y0, r = b, fill = type), alpha = 1, lwd = .8, show.legend = F) +
  #geom_mark_rect(data = tmp, aes(x = x, y = y), fill = "grey80") +
  geom_text(data = labs_dt, aes(x, y, label = Lab), size = 6, fontface = "bold") +
  scale_fill_brewer(palette = "Pastel1", direction = -1) +
  coord_fixed() +
  #ylim(c(-1.5,1.5)) +
  theme_void()

```
:::




```{r}
#| label: fig-set
#| fig-cap: "An example of sets"
#| fig-dpi: 330

library(tidyverse)
library(ggforce)

labs_dt <- tibble(
  x = c(-.5, .5, 0, 1.2),
  y = c(0, 0, 0, .9),
  Lab = c("A", "B", latex2exp::TeX("$\\A\\cap\\B$"), latex2exp::TeX("$\\Omega$"))
)

tmp <- tibble(
  x = c(-1.5, 1.5),
  y = c(-1,1)
)

tibble(
  x0 = c(-.5, .5),
  y0 = c(0, 0),
  r = c(.75,.75),
  type = factor(1:2)
) %>%
  ggplot() +
  geom_circle(aes(x0=x0, y0=y0, r=r, fill = type), alpha = .3, lwd = .8, show.legend = F) +
  geom_mark_rect(data = tmp, aes(x = x, y = y), fill = "grey80") +
  geom_text(data = labs_dt, aes(x, y, label = Lab), parse = T, size = 4.5) +
  scale_fill_brewer(palette = "Set1") +
  ylim(c(-1.5,1.5)) +
  coord_fixed() +
  ggmap::theme_nothing()

```




```{r}

library(gt)

tibble(
  Symbol = c(
    "$$\\Omega$$",
    "$$\\emptyset$$",
    "$$\\cup$$",
    "$$\\cap$$",
    "$$\\setminus$$",
    "$$\\tilde{}$$"
  )
) %>%
  gt() %>%
  fmt_markdown()



```



